
3610 project requirements: 

GitHub: https://github.com/JivanTaj/DndCharacterCreator
(branch this) 

------------ Types of attack: ----------
-- XSS
	-- protected by password requirements and in built features 
	--
	-- 
-- SQL injection
	-- protected by password requirements and in built features 
	--
	-- 
-- CSRF	
	-- how to protect 
	--
	-- 
-- cookie attacks 
	-- how to protect 
	-- Restrict access to cookies to only http requests, so don't allow access via client side scripting.
	-- Set an expiration date to limit session hijacking.
-- Brute force
	--password lockouts 
	--
	-- 
-- URL traversal
	-- how to protect 
	-- Restrict access to character actions based on the identity of the user logged in, if it doesn't match with the character they are interacting with, then we deny access.
	-- Custom error page for 404 errors


------------ feature: 		Priority:	Done? ---------- 

Strong password req. 		1		yes
custom error messages		1 		yes
input valifation (regex etc.)	1		yes
password hashing		2		yes	
URL traversal			1		yes
account permissions		1		yes  
password lockout 		2		yes 
cookie modification 		2 		yes


Key Components of the Project should include:

	Secure Design: Input validation exists for all the fields, even with javascript turned off. Error handling also exists along with a 404 page for unknown URL paths. Session handling exists as well for accounts.

	Authentication and Authorization: This project uses Microsoft Identity for authentication and authorization. This ensures that characters owned by other accounts don't get affected by accounts that don't own the character.

	Data Encryption: This project uses Microsoft Identity which uses PBKDF2. This is an algorithm that uses SHA256 along with a 128 bit salt, a random key, and 10000 iterations. The project also redirects http calls to https automatically.

	Session Handling: Session handling is also implemented using Microsoft Identity with services in the Program.cs file. It uses cookies for sessions that are only accessible by http and have a short expiration date.

	Error Handling: Error handling is implemented to ensure exceptions aren't thrown, and a 404 page displays if some error does occur.

	Code Review: We have tested and used Visual Studio's code analysis to ensure proper coding practices.

	Documentation: This documentation is included in this project.